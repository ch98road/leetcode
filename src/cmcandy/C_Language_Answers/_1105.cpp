#include <iostream>
#include <limits.h>
#include <vector>
using namespace ::std;
class Solution
{
public:
    int minHeightShelves(vector<vector<int>> &books, int shelf_width)
    {
        int len = books.size();
        vector<int> dp(len, INT_MAX);
        //记录当前层剩余容量
        int tmp = shelf_width - books[0][0];
        //记录当前合并层的最高书
        int highest = books[0][1];
        //记录当前合并层最早的书的index
        int index = 0;
        dp[0] = books[0][1];
        for (int i = 1; i < len; i++)
        {
            //本层的最高高度
            int now_hightest = books[i][1];
            //防止进不了循环的情况发生，此时就单单开新一行，然后放当前的就行了
            highest = now_hightest;
            //新增一层
            tmp = shelf_width - books[i][0];
            dp[i] = dp[i - 1] + now_hightest;
            int now_tmp = tmp;
            for (int j = i - 1; j >= 0 && now_tmp - books[j][0] >= 0; j--)
            {
                //计算当前层的高度，上一层剩余高度(dp[i-j])
                now_hightest = max(now_hightest, books[j][1]);
                now_tmp -= books[j][0];
                if (j == 0 && dp[i] > now_hightest)
                {
                    tmp = now_tmp;
                    dp[i] = now_hightest;
                    highest = now_hightest;
                }
                else if (dp[i] > dp[j - 1] + now_hightest)
                {
                    tmp = now_tmp;
                    dp[i] = dp[j - 1] + now_hightest;
                    highest = now_hightest;
                }
            }
        }
        return dp[len - 1];
    }
};
int main(int argc, char const *argv[])
{
    Solution s;
    vector<vector<int>> books{{1, 1}, {2, 3}, {2, 3}, {1, 1}, {1, 1}, {1, 1}, {1, 2}}; //4
    // vector<vector<int>> books{{1,3},{2,4},{3,2}};

    // vector<vector<int>> books{{7,3},{8,7},{2,7},{2,5}};//10
    // vector<vector<int>> books{{138,178},{181,141},{169,69},{78,126},{57,142},{107,4},{146,27},{117,64},{181,118},{116,82},{12,92},{149,85},{1,30},{58,168},{42,34},{91,41},{161,122},{181,31},{4,141},{19,63},{128,97},{87,43},{126,26},{63,24},{83,199},{21,21},{83,102},{45,86},{125,115},{164,101},{53,65},{110,141},{60,130},{33,70},{184,75},{49,28},{94,74},{118,59},{91,77},{20,108},{45,177},{189,10},{124,184},{8,94},{192,32},{146,77},{196,106},{95,19},{32,135},{129,54},{23,164},{122,180},{162,91},{26,77},{47,196},{16,64},{183,117},{88,88},{57,147},{125,173},{39,186},{158,43},{173,97},{85,100},{55,70},{72,184},{72,176},{37,130},{60,66},{161,15},{84,11},{124,121},{65,71},{162,137},{55,24},{106,82},{53,149},{80,84},{150,140},{106,78},{69,196},{146,46},{100,40},{84,110},{5,102},{58,140},{184,96},{134,177},{44,136},{181,15},{107,157},{62,72},{47,172},{148,167},{94,143},{60,94},{33,88},{52,18},{130,74},{154,136},{154,47},{34,195},{3,2},{138,62},{122,11},{86,180},{57,43},{132,112},{37,38},{178,107},{18,173},{58,23},{125,95},{155,106},{121,140},{36,112},{151,197},{136,185},{172,109},{14,39},{121,12},{50,18},{87,194},{70,170},{186,72},{148,141},{147,23},{194,181},{26,62},{140,171},{25,56},{141,110},{159,100},{127,85},{11,53},{11,37},{73,59},{140,21},{112,153},{80,193},{67,197},{4,101},{31,130},{95,20},{159,197},{93,2},{150,185},{168,141},{111,133},{33,48},{149,63},{111,23},{179,114},{102,134},{125,109},{136,180},{43,69},{167,86},{32,117},{159,148},{29,195},{97,146},{159,30},{24,41},{183,142},{128,112},{144,152},{10,119},{165,124},{2,68},{94,5},{112,105},{77,173},{119,161},{69,194},{189,79},{55,66},{171,172},{179,82},{144,192},{80,196},{145,109},{17,8},{134,129},{29,86},{159,84},{123,66},{18,37},{24,48},{198,92},{94,3},{197,40},{51,99},{143,71},{66,170},{159,1},{198,155},{105,178},{43,129},{70,95},{129,184},{171,191},{89,144},{121,86},{43,143},{153,30},{74,170},{120,164},{1,11},{43,52},{64,198},{28,55},{134,18},{112,4},{136,131}};//200
    // vector<vector<int>> books{{12, 48}, {106, 14}, {129, 108}, {76, 194}, {139, 104}, {52, 20}, {145, 57}, {2, 183}, {86, 96}, {42, 60}, {120, 198}, {185, 80}, {139, 177}, {132, 115}, {9, 21}, {105, 98}, {6, 97}, {24, 136}, {163, 144}, {75, 152}, {30, 76}, {127, 17}, {181, 40}, {99, 6}, {39, 169}, {164, 38}, {90, 56}, {10, 81}, {49, 37}, {188, 103}, {37, 177}, {40, 100}, {18, 6}, {9, 48}, {20, 174}, {140, 119}, {34, 87}, {78, 99}, {166, 174}, {106, 127}, {17, 7}, {128, 138}, {170, 50}, {134, 149}, {138, 85}, {14, 62}, {99, 95}, {81, 21}, {20, 169}, {115, 121}, {129, 2}, {114, 88}, {164, 184}, {11, 168}, {111, 68}, {193, 31}, {117, 132}, {154, 2}, {99, 143}, {88, 62}, {56, 106}, {87, 67}, {137, 51}, {67, 159}, {156, 184}, {19, 47}, {116, 53}, {3, 144}, {116, 175}, {111, 13}, {79, 110}, {200, 100}, {117, 162}, {8, 70}, {171, 182}, {125, 183}, {9, 200}, {44, 131}, {65, 30}, {50, 86}, {118, 111}, {149, 35}, {41, 199}, {29, 74}, {10, 161}, {3, 115}, {134, 76}, {126, 31}, {19, 52}, {103, 130}, {95, 164}, {46, 15}, {3, 100}, {37, 23}, {128, 195}, {182, 151}, {111, 88}, {186, 5}, {152, 92}, {22, 133}, {91, 60}, {80, 120}, {51, 39}, {74, 3}, {52, 45}, {168, 76}, {61, 79}, {54, 60}, {143, 108}, {92, 167}, {57, 182}, {173, 99}, {79, 56}, {103, 3}, {112, 167}, {111, 3}, {127, 83}, {51, 8}, {7, 155}, {177, 42}, {181, 48}, {120, 96}, {93, 1}, {78, 133}, {94, 53}, {177, 173}, {110, 62}, {118, 161}, {162, 42}, {137, 164}, {171, 197}, {95, 143}, {44, 33}, {80, 164}, {127, 4}, {86, 63}, {56, 12}, {80, 39}, {145, 46}, {28, 111}, {179, 79}, {162, 91}, {42, 153}, {178, 13}, {14, 75}, {152, 53}, {110, 159}, {11, 6}, {17, 157}, {60, 170}, {174, 53}, {41, 94}, {67, 34}, {147, 39}, {194, 181}, {59, 77}, {29, 170}, {59, 85}, {45, 74}, {94, 113}, {191, 7}, {195, 6}, {184, 113}, {133, 29}, {166, 129}, {198, 1}, {91, 29}, {104, 166}, {74, 105}, {162, 50}, {194, 151}, {22, 12}, {69, 156}, {144, 92}, {94, 161}, {69, 184}, {8, 139}, {200, 105}, {26, 8}, {133, 111}, {76, 163}, {178, 78}, {143, 198}, {106, 87}, {109, 26}, {10, 105}, {37, 172}, {4, 180}, {200, 69}, {137, 154}, {186, 152}, {127, 4}, {104, 54}, {157, 39}, {142, 170}, {50, 86}, {166, 110}, {16, 101}, {195, 3}, {164, 123}, {11, 105}, {152, 31}, {11, 29}, {80, 93}, {113, 16}, {24, 119}, {135, 95}, {161, 196}, {131, 141}, {42, 188}, {169, 73}, {168, 120}, {182, 87}, {173, 21}, {128, 167}, {115, 160}, {160, 95}, {187, 63}, {158, 52}, {146, 155}, {137, 152}, {115, 107}, {48, 169}, {185, 119}, {100, 187}, {17, 25}, {189, 43}, {167, 109}, {168, 100}, {192, 200}, {175, 112}, {145, 142}, {89, 105}, {42, 163}, {150, 41}, {62, 50}, {2, 43}, {80, 167}, {178, 142}, {160, 168}, {1, 34}, {130, 46}, {133, 185}, {141, 44}, {106, 173}, {40, 55}, {168, 142}, {26, 44}, {47, 187}, {145, 126}, {128, 128}, {75, 34}, {154, 181}, {156, 15}, {59, 102}, {12, 117}, {65, 122}, {58, 60}, {193, 22}, {72, 15}, {111, 10}, {123, 65}, {47, 78}, {120, 176}, {186, 141}, {10, 185}, {19, 179}, {30, 176}, {165, 122}, {27, 199}, {68, 141}, {149, 67}, {67, 113}, {106, 21}, {69, 29}};

    int res = s.minHeightShelves(books, 4);
    cout << res;
    return 0;
}
